---
description: Tools and utilities available in the content-ops-starter project
globs: ["scripts/*.js", "scripts/tools/*.js"]
alwaysApply: true
---

# Content Operations Tools

This file provides an overview of the tools available in the content-ops-starter project. For more detailed documentation, refer to [toolcommands.md](mdc:.cursor/rules/toolcommands.md).

## Custom Command-Line Tools

These tools are implemented as Node.js scripts and can be run via npm commands.

### Content Generation & Validation

- **generate-page**: Creates HTML-TSX file pairs from a content brief
- **validate-pairing**: Checks for mismatches between HTML placeholders and TSX props
- **fix-md-errors**: Fixes common markdown formatting errors in content files

### Performance & Enhancement

- **optimize-performance**: Analyzes and optimizes performance of HTML-TSX pairs
- **enhance-interaction**: Adds client-side features to HTML-TSX pairs (toggles, animations, etc.)

### Testing & Deployment

- **generate-test**: Creates automated test scaffolding for HTML-TSX pairs
- **deploy-preview**: Configures Netlify deployment preview settings

### Agent Tools

- **think-tool**: Enhances AI agent reasoning by reflecting on complex tasks and suggesting approaches
  - Located in: `scripts/tools/think-tool.js`
  - Test with: `node scripts/tools/test-think-tool.js`
  - Integrated workflow: `node scripts/tools/index.js`

## Built-in AI Assistant Tools

These tools are available directly through the AI assistant interface in Cursor.

### Code Navigation

- **codebase_search**: Semantic search for code concepts
- **grep_search**: Text-based regex search for exact matches
- **file_search**: Fuzzy matching against file paths
- **list_dir**: List directory contents

### File Operations

- **read_file**: View file contents
- **edit_file**: Make changes to files
- **reapply**: Fix failed edits with a smarter model
- **delete_file**: Remove files

### Other Capabilities

- **run_terminal_cmd**: Execute shell commands
- **web_search**: Find real-time information online
- **think_tool**: AI reasoning enhancement for complex tasks

## Usage Examples

```bash
# Generate a new page
npm run generate-page my-page -- --title "My New Page" --description "A page about something interesting"

# Validate pairing between HTML and TSX
npm run validate-pairing -- --single my-page

# Optimize a page for performance
npm run optimize-performance -- -p my-page --lazy-load --add-preload

# Test the think-tool
node scripts/tools/test-think-tool.js
```
